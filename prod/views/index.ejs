<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <link rel="icon" type="image" href="Logos/logo_FDE.svg">
    <link rel="stylesheet" href="css/style2.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <title>FDE : Accueil</title>
</head>
<body>
    <div class="wrapper">
        <%- include('partials/header') %>
        <main>
            <%- include('account_icon_bar.html'); %>
            <div class="container">
                <div class="box">
                    <div class="box-container">
                        <div class="top">
                            <header>Courbe</header>
                            <span>Cette courbe est générée dynamiquement à partir des objets connectés.</span>
                            <div class="error_msg" id="error_msg">
                                <% if (error_msg != ""){ %>
                                    <%= error_msg %>
                                <% } %>
                            </div>
                        </div>
                        
                        <canvas id="myChart" style="width:100%; background-color: rgba(255,255,255,0.5); border-radius: 5px; padding: 5px;"></canvas>
                        
                        <div id="sensor-controls" style="margin-top: 20px; padding: 10px; background: rgba(255,255,255,0.5); border-radius: 5px;">
                            <p>Sélectionne les objets connectés à afficher :</p>
                        
                            <details open>
                                <summary><strong><input type="checkbox" id="parent-production"> Production</strong></summary>
                                <div id="production-checkboxes" style="margin-left: 20px;"></div>
                            </details>
                            
                            <details open>
                                <summary><strong><input type="checkbox" id="parent-consumption"> Consommation</strong></summary>
                                <div id="consumption-checkboxes" style="margin-left: 20px;"></div>
                            </details>
                            
                        </div>

                        <script>
                            function randomBetween(min, max) {
                                return Math.floor(Math.random() * (max - min + 1) + min);
                            }

                            function getColorByType(type) {
                                switch (type) {
                                    case 'consumption':
                                        return randomYellow();
                                    case 'SolarPanel':
                                        return randomBlue();   
                                    case 'WindTurbine':
                                        return randomGreen();  
                                    case 'Nuclear':
                                        return randomRed(); 
                                    case 'HydroelectricDam':
                                        return randomViolet();  
                                    case 'BatteryStorage':
                                        return randomPink();   
                                    default:
                                        return randomRed();    
                                }
                            }

                            // Fonction pour générer une nuance de rouge
                            function randomRed() {
                                const r = randomBetween(150, 255); // Rouge fort
                                const g = randomBetween(0, 100);   // Peu de vert
                                const b = randomBetween(0, 100);   // Peu de bleu
                                return `rgb(${r}, ${g}, ${b})`;
                            }

                            // Fonction pour générer une nuance de bleu
                            function randomBlue() {
                                const r = randomBetween(0, 100);   // Peu de rouge
                                const g = randomBetween(0, 100);   // Peu de vert
                                const b = randomBetween(150, 255); // Bleu fort
                                return `rgb(${r}, ${g}, ${b})`;
                            }

                            // Fonction pour générer une nuance de vert
                            function randomGreen() {
                                const r = randomBetween(0, 100);
                                const g = randomBetween(150, 255);
                                const b = randomBetween(0, 100);
                                return `rgb(${r}, ${g}, ${b})`;
                            }

                            // Fonction pour générer une nuance de jaune
                            function randomYellow() {
                                const r = randomBetween(200, 255);
                                const g = randomBetween(200, 255);
                                const b = randomBetween(0, 50);
                                return `rgb(${r}, ${g}, ${b})`;
                            }

                            // Fonction pour générer une nuance de violet
                            function randomViolet() {
                                const r = randomBetween(150, 255);
                                const g = randomBetween(0, 100);
                                const b = randomBetween(150, 255);
                                return `rgb(${r}, ${g}, ${b})`;
                            }

                            // Fonction pour générer une nuance de rose
                            function randomPink() {
                                const r = randomBetween(200, 255);
                                const g = randomBetween(100, 200);
                                const b = randomBetween(150, 220);
                                return `rgb(${r}, ${g}, ${b})`;
                            }

                        
                            let myChart;
                            let datasetRefs = {};
                        
                            fetch('/data')
                                .then(response => response.json())
                                .then(data => {
                                    const datasets = [];
                                    const grouped = {};
                                    const objectMap = {}; // Pour stocker { type, type2 }

                                    if (<%= userConnected %>) {
                                        data.forEach(entry => {
                                            if (!grouped[entry.connected_object]) {
                                                grouped[entry.connected_object] = [];
                                                objectMap[entry.connected_object] = {
                                                    type: entry.type,
                                                    type2: entry.type2
                                                };
                                            }
                                            grouped[entry.connected_object].push({
                                                x: new Date(entry.date * 1000),
                                                y: entry.value
                                            });
                                        });
                                    } else {
                                        data.forEach(entry => {
                                            if (entry.type !== "consumption") return;
                                            if (!grouped[entry.connected_object]) {
                                                grouped[entry.connected_object] = [];
                                                objectMap[entry.connected_object] = {
                                                    type: entry.type,
                                                    type2: entry.type2
                                                };
                                            }
                                            grouped[entry.connected_object].push({
                                                x: new Date(entry.date * 1000),
                                                y: entry.value
                                            });
                                        });
                                    }

                                    for (const [object, values] of Object.entries(grouped)) {
                                        const typeInfo = objectMap[object];
                                        const color = getColorByType(typeInfo.type2 || typeInfo.type); // Utilisation propre
                                        const dataset = {
                                            label: object,
                                            data: values,
                                            fill: false,
                                            borderColor: color,
                                            tension: 0.1
                                        };
                                        datasets.push(dataset);
                                        datasetRefs[object] = dataset;
                                    }

                                    const ctx = document.getElementById('myChart').getContext('2d');
                                    myChart = new Chart(ctx, {
                                        type: 'line',
                                        data: { datasets },
                                        options: {
                                            responsive: true,
                                            elements: {
                                                line: { spanGaps: true }
                                            },
                                            scales: {
                                                x: {
                                                    type: 'time',
                                                    time: {
                                                        unit: 'minute',
                                                        displayFormats: {
                                                            minute: 'HH:mm',
                                                            hour: 'HH:mm'
                                                        }
                                                    },
                                                    title: {
                                                        display: true,
                                                        text: 'Date'
                                                    }
                                                },
                                                y: {
                                                    title: {
                                                        display: true,
                                                        text: 'Production/Consommation'
                                                    }
                                                }
                                            }
                                        }
                                    });

                                    // Correction de la fonction updateChart :
                                    function updateChart() {
                                        fetch('/data')
                                            .then(response => response.json())
                                            .then(data => {
                                                const grouped = {};
                                                const newObjectMap = {};

                                                if (<%= userConnected %>) {
                                                    data.forEach(entry => {
                                                        if (!grouped[entry.connected_object]) {
                                                            grouped[entry.connected_object] = [];
                                                            newObjectMap[entry.connected_object] = {
                                                                type: entry.type,
                                                                type2: entry.type2
                                                            };
                                                        }
                                                        grouped[entry.connected_object].push({
                                                            x: new Date(entry.date * 1000),
                                                            y: entry.value
                                                        });
                                                    });
                                                } else {
                                                    data.forEach(entry => {
                                                        if (entry.type !== "consumption") return;
                                                        if (!grouped[entry.connected_object]) {
                                                            grouped[entry.connected_object] = [];
                                                            newObjectMap[entry.connected_object] = {
                                                                type: entry.type,
                                                                type2: entry.type2
                                                            };
                                                        }
                                                        grouped[entry.connected_object].push({
                                                            x: new Date(entry.date * 1000),
                                                            y: entry.value
                                                        });
                                                    });
                                                }

                                                for (const [object, values] of Object.entries(grouped)) {
                                                    if (datasetRefs[object]) {
                                                        datasetRefs[object].data = values;
                                                    } else {
                                                        const typeInfo = newObjectMap[object];
                                                        const color = getColorByType(typeInfo.type2 || typeInfo.type);

                                                        const newDataset = {
                                                            label: object,
                                                            data: values,
                                                            fill: false,
                                                            borderColor: color,
                                                            tension: 0.1
                                                        };
                                                        myChart.data.datasets.push(newDataset);
                                                        datasetRefs[object] = newDataset;
                                                    }
                                                }

                                                myChart.update();
                                            });
                                    }

                                    setInterval(updateChart, 1000);

                                    const productionContainer = document.getElementById('production-checkboxes');
                                    const consumptionContainer = document.getElementById('consumption-checkboxes');

                                    Object.keys(datasetRefs).forEach(objectName => {
                                        const checkbox = document.createElement('input');
                                        checkbox.type = 'checkbox';
                                        checkbox.value = objectName;
                                        checkbox.checked = true;
                                        checkbox.className = 'objectCheckbox';
                                        checkbox.id = `checkbox-${objectName}`;

                                        const label = document.createElement('label');
                                        label.htmlFor = checkbox.id;
                                        label.textContent = objectName;

                                        const div = document.createElement('div');
                                        div.appendChild(checkbox);
                                        div.appendChild(label);

                                        const typeInfo = objectMap[objectName];
                                        const type = typeInfo.type;
                                        if (type === "production") {
                                            productionContainer.appendChild(div);
                                        } else if (type === "consumption") {
                                            consumptionContainer.appendChild(div);
                                        }

                                        checkbox.addEventListener('change', () => {
                                            updateChartVisibility();
                                            updateParentCheckboxes();
                                        });
                                    });

                                    document.getElementById('parent-production').addEventListener('change', function () {
                                        setAllCheckboxesInGroup('production-checkboxes', this.checked);
                                    });

                                    document.getElementById('parent-consumption').addEventListener('change', function () {
                                        setAllCheckboxesInGroup('consumption-checkboxes', this.checked);
                                    });

                                    updateChartVisibility();
                                    updateParentCheckboxes();
                                });

                        
                            function updateChartVisibility() {
                                const checkedLabels = Array.from(document.querySelectorAll('.objectCheckbox:checked'))
                                    .map(cb => cb.value);
                        
                                myChart.data.datasets.forEach(dataset => {
                                    dataset.hidden = !checkedLabels.includes(dataset.label);
                                });
                        
                                myChart.update();
                            }
                        
                            function updateParentCheckboxes() {
                                updateParentCheckbox('production-checkboxes', 'parent-production');
                                updateParentCheckbox('consumption-checkboxes', 'parent-consumption');
                            }
                        
                            function updateParentCheckbox(groupId, parentId) {
                                const group = document.getElementById(groupId);
                                const checkboxes = group.querySelectorAll('input[type="checkbox"]');
                                const parent = document.getElementById(parentId);
                        
                                const allChecked = Array.from(checkboxes).every(cb => cb.checked);
                                const noneChecked = Array.from(checkboxes).every(cb => !cb.checked);
                        
                                parent.indeterminate = !allChecked && !noneChecked;
                                parent.checked = allChecked;
                            }
                        
                            function setAllCheckboxesInGroup(groupId, checked) {
                                const group = document.getElementById(groupId);
                                const checkboxes = group.querySelectorAll('input[type="checkbox"]');
                                checkboxes.forEach(cb => cb.checked = checked);
                                updateChartVisibility();
                                updateParentCheckboxes();
                            }
                        </script>
                        
                    </div>
                </div>
            </div>
        </main>
    </div>
</body>
</html>
