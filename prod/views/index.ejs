<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="css/style2.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Chart.js et adaptateur date -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <title>FDE : Accueil</title>
</head>
<body>
    <div class="wrapper">
        <%- include('partials/header') %>
        <main>
            <% if (typeof account_menu !== 'undefined'){ %>
                <%- include('account_icon_bar.html'); %>
            <% } %>
            <div class="container">
                <div class="box">
                    <div class="box-container">
                        <div class="top">
                            <header>Courbe</header>
                            <span>Cette courbe est générée dynamiquement à partir des objets connectés.</span>
                            <div class='error_msg'><%= welcome_msg %></div>
                        </div>
                        
                        <canvas id="myChart" style="width:100%; background-color: rgba(255,255,255,0.5); border-radius: 5px; padding: 5px;"></canvas>
                        
                        <div id="sensor-controls" style="margin-top: 20px; padding: 10px; background: rgba(255,255,255,0.5); border-radius: 5px;">
                            <p>Sélectionne les objets connectés à afficher :</p>
                        </div>

                        <script>
                            function getRandomColor() {
                                const letters = '0123456789ABCDEF';
                                let color = '#';
                                for (let i = 0; i < 6; i++) {
                                    color += letters[Math.floor(Math.random() * 16)];
                                }
                                return color;
                            }

                            let myChart;
                            let datasetRefs = {};

                            fetch('/data')
                                .then(response => response.json())
                                .then(data => {
                                    const datasets = [];
                                    const grouped = {};
                                    data.forEach(entry => {
                                        if (!grouped[entry.connected_object]) {
                                            grouped[entry.connected_object] = [];
                                        }
                                        grouped[entry.connected_object].push({
                                            x: new Date(entry.date),
                                            y: entry.value
                                        });
                                    });

                                    for (const [object, values] of Object.entries(grouped)) {
                                        const dataset = {
                                            label: object,
                                            data: values,
                                            fill: false,
                                            borderColor: getRandomColor(),
                                            tension: 0.1
                                        };
                                        datasets.push(dataset);
                                        datasetRefs[object] = dataset;
                                    }

                                    const ctx = document.getElementById('myChart').getContext('2d');
                                    myChart = new Chart(ctx, {
                                        type: 'line',
                                        data: { datasets },
                                        options: {
                                            responsive: true,
                                            elements: {
                                                line: { spanGaps: true }
                                            },
                                            scales: {
                                                x: {
                                                    type: 'time',
                                                    time: {
                                                        unit: 'minute',
                                                        displayFormats: {
                                                            minute: 'HH:mm',
                                                            hour: 'HH:mm'
                                                        }
                                                    },
                                                    title: {
                                                        display: true,
                                                        text: 'Date'
                                                    }
                                                },
                                                y: {
                                                    title: {
                                                        display: true,
                                                        text: 'Production'
                                                    }
                                                }
                                            }
                                        }
                                    });

                                    const checkboxContainer = document.getElementById('sensor-controls');

                                    Object.keys(datasetRefs).forEach(objectName => {
                                        const checkbox = document.createElement('input');
                                        checkbox.type = 'checkbox';
                                        checkbox.value = objectName;
                                        checkbox.checked = true;
                                        checkbox.className = 'objectCheckbox';
                                        checkbox.id = `checkbox-${objectName}`;

                                        const label = document.createElement('label');
                                        label.htmlFor = checkbox.id;
                                        label.textContent = objectName;

                                        const div = document.createElement('div');
                                        div.appendChild(checkbox);
                                        div.appendChild(label);

                                        checkboxContainer.appendChild(div);

                                        checkbox.addEventListener('change', () => {
                                            updateChartVisibility();
                                        });
                                    });

                                    updateChartVisibility();
                                });

                            function updateChartVisibility() {
                                const checkedLabels = Array.from(document.querySelectorAll('.objectCheckbox:checked'))
                                    .map(cb => cb.value);

                                myChart.data.datasets.forEach(dataset => {
                                    dataset.hidden = !checkedLabels.includes(dataset.label);
                                });

                                myChart.update();
                            }
                        </script>
                    </div>
                </div>
            </div>
        </main>
    </div>
</body>
</html>
